ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, c(1,pelt,length(data)+1))), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, c(1,pelt,length(data)+1))), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, c(1,pelt,length(data)+1))), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, seg = c(1,pelt,length(data)+1))), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
type_changement = "mean"
penalty = "Manual"
pen.value = var(data) * log(length(data))
pelt(data, type_changement, penalty, pen.value)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, seg = c(1,pelt,length(data)+1))), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
x=c(rnorm(100,3,2),rnorm(100,10,2),rnorm(100,2,2),rnorm(100,-4,2),rnorm(100,6,2),rnorm(100,2,2),rnorm(100,8,2))
y=model_signal(x,seg=c(1,300,701))
plot(x)
lines(y, col="red")
plot(model_signal(x,seg=c(1,300,701)),col = "red")
plot(data)
plot(model_signal(x,seg=c(1,300,701)),col = "red")
plot(model_signal(data,seg=c(1,300,701)),col = "red")
plot(model_signal(data,seg = c(1,pelt,length(data)+1)),col = "red")
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
type_changement = "mean"
penalty = "Manual"
pen.value = var(data) * log(length(data))
pelt(data, type_changement, penalty, pen.value)
plot(data)
plot(model_signal(data,seg = c(1,pelt,length(data)+1)),col = "red")
cpt_points <- c(1,pelt,length(data)+1)
plot(model_signal(data,cpt_points),col = "red")
cpt_points <- c(1,pelt,length(data)+1)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
type_changement = "mean"
penalty = "Manual"
pen.value = var(data) * log(length(data))
pelt(data, type_changement, penalty, pen.value)
pelt <- pelt(data, type_changement, penalty, pen.value)
plot(data)
cpt_points <- c(1,pelt,length(data)+1)
plot(model_signal(data,cpt_points),col = "red")
plot(data)
lines(model_signal(data,cpt_points),col = "red")
cpt_points <- c(1, pelt, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_points)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
library(DragonBall)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
type_changement = "mean"
penalty = "Manual"
pen.value = var(data) * log(length(data))
pelt(data, type_changement, penalty, pen.value )
pelt(data, type_changement, penalty, pen.value )
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
type_changement = "mean"
penalty = "Manual"
pen.value = var(data) * log(length(data))
pelt(data, type_changement, penalty, pen.value )
seg <- hubr::Hubert_segmentation(data, alpha)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
seg <- hubr::Hubert_segmentation(data, alpha = 0.05)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
graph <- function(data, cpt_points) {
cpt_points <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_points)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
return(ggplot)
}
graph(data, cpt_points)
cpt_points <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_points)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
graph <- function(data, cpt_points) {
cpt_points <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_points)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
}
graph(data, cpt_points)
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
}
graph(data, cpt_points)
cpt_point <- c(1, cpt_points, length(data)+1)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
seg <- hubr::Hubert_segmentation(data, alpha = 0.05)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
}
graph(data, cpt_points)
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
return(ggplot)
}
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
graph(data, cpt_points)
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data)
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
}
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
graph(data, cpt_points)
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data)
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
}
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
graph(data, cpt_points)
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data)
hubert(data, alpha)
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
cpt_point <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data, alpha)
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
cpt_point <- c(1, cpt_points, length(data)+1)
ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data, alpha)
lines(model_signal(data, cpt_point), col = "red", lwd = 2)
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
cpt_point <- c(1, cpt_points, length(data)+1)
plot(data, type = "l")
lines(model_signal(data, cpt_point), col = "red", lwd = 2)
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data, alpha)
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
p <- ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
return(p)
}
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
p <- ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
return(p)
}
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data, alpha)
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
p <- ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
return(p)
}
graph(data, cpt_points)
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data, alpha)
graph <- function(data, cpt_points) {
cpt_point <- c(1, cpt_points, length(data)+1)
p <- ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt_point)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
return(p)
}
hubert <- function(data, alpha = 0.05) {
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
graph(data, cpt_points)
return(cpt_points)
}
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data, alpha)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
alpha <- 0.05
hubert(data, alpha)
plot(data, type = "l")
lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
#' Change Point Detection using hubert algorithm
#' @param data Numeric vector containing the data to segment.
#' @param alpha Numeric value representing the alpha parameter for Hubert segmentation.
#' @return A numeric vector containing the segmentation points.
#' @export
#' @examples
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
cpt_points <- cpt_points[-length(cpt_points)]
cpt_points <- cpt_points[-1]
plot(data, type = "l")
lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
#' Change Point Detection using hubert algorithm
#' @param data Numeric vector containing the data to segment.
#' @param alpha Numeric value representing the alpha parameter for Hubert segmentation.
#' @return A numeric vector containing the segmentation points.
#' @export
#' @examples
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
plot(data, type = "l")
lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
seg <- hubr::Hubert_segmentation(data, alpha)
cpt_points <- seg$locations
plot(data, type = "l")
# lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
lines(model_signal(data,cpt_points), col = "red",size = 2)
# lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
lines(model_signal(data,cpt_points), col = "red",size = 4)
# lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
lines(model_signal(data,cpt_points), col = "red",size = 4)
plot(data, type = "l")
# lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
lines(model_signal(data,cpt_points), col = "red",size = 4)
e
e
plot(data, type = "l")
# lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
lines(model_signal(data,cpt_points), col = "red",size = 4)
plot(data, type = "l")
# lines(model_signal(data, c(1,cpt_points,length(data))), col = "red",size = 2)
lines(model_signal(data,cpt_points), col = "red",lwd  = 2)
library(DragonBall)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
type_changement = "mean"
penalty = "Manual"
pen.value = var(data) * log(length(data))
pelt(data, type_changement, penalty, pen.value )
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
type_changement = "mean"
penalty = "Manual"
pen.value = var(data) * log(length(data))
pelt(data, type_changement, penalty, pen.value )
library(DragonBall)
data <- c(rnorm(40,0,2),rnorm(60,5,2),rnorm(60,1,2),rnorm(40,5,2))
type_changement = "mean"
penalty = "Manual"
pen.value = var(data) * log(length(data))
pelt(data, type_changement, penalty, pen.value )
p <- ggplot(data = data.frame(x = 1:length(data), y = data), aes(x = x, y = y)) +
geom_line() +
geom_line(aes(y = model_signal(data, cpt)), color = "red", size = 1) +
theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black")
) +
xlab("Distance") +
ylab("valeur")
